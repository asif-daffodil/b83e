{"version":3,"file":"eta.module.mjs","sources":["../src/storage.ts","../src/err.ts","../src/compile.ts","../src/compile-string.ts","../src/utils.ts","../src/config.ts","../src/parse.ts","../src/render.ts","../src/core.ts","../src/file-handling.ts","../src/index.ts"],"sourcesContent":["/**\n * Handles storage and accessing of values\n *\n * In this case, we use it to store compiled template functions\n * Indexed by their `name` or `filename`\n */\n\nexport class Cacher<T> {\n  constructor(private cache: Record<string, T>) {}\n  define(key: string, val: T): void {\n    this.cache[key] = val;\n  }\n  get(key: string): T {\n    return this.cache[key];\n  }\n  remove(key: string): void {\n    delete this.cache[key];\n  }\n  reset(): void {\n    this.cache = {};\n  }\n  load(cacheObj: Record<string, T>): void {\n    this.cache = { ...this.cache, ...cacheObj };\n  }\n}\n","export class EtaError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"Eta Error\";\n  }\n}\n\nexport class EtaParseError extends EtaError {\n  constructor(message: string) {\n    super(message);\n    this.name = \"EtaParser Error\";\n  }\n}\n\nexport class EtaRuntimeError extends EtaError {\n  constructor(message: string) {\n    super(message);\n    this.name = \"EtaRuntime Error\";\n  }\n}\n\nexport class EtaFileResolutionError extends EtaError {\n  constructor(message: string) {\n    super(message);\n    this.name = \"EtaFileResolution Error\";\n  }\n}\n\nexport class EtaNameResolutionError extends EtaError {\n  constructor(message: string) {\n    super(message);\n    this.name = \"EtaNameResolution Error\";\n  }\n}\n\n/**\n * Throws an EtaError with a nicely formatted error and message showing where in the template the error occurred.\n */\n\nexport function ParseErr(message: string, str: string, indx: number): never {\n  const whitespace = str.slice(0, indx).split(/\\n/);\n\n  const lineNo = whitespace.length;\n  const colNo = whitespace[lineNo - 1].length + 1;\n  message +=\n    \" at line \" +\n    lineNo +\n    \" col \" +\n    colNo +\n    \":\\n\\n\" +\n    \"  \" +\n    str.split(/\\n/)[lineNo - 1] +\n    \"\\n\" +\n    \"  \" +\n    Array(colNo).join(\" \") +\n    \"^\";\n  throw new EtaParseError(message);\n}\n\nexport function RuntimeErr(originalError: Error, str: string, lineNo: number, path: string): never {\n  // code gratefully taken from https://github.com/mde/ejs and adapted\n\n  const lines = str.split(\"\\n\");\n  const start = Math.max(lineNo - 3, 0);\n  const end = Math.min(lines.length, lineNo + 3);\n  const filename = path;\n  // Error context\n  const context = lines\n    .slice(start, end)\n    .map(function (line, i) {\n      const curr = i + start + 1;\n      return (curr == lineNo ? \" >> \" : \"    \") + curr + \"| \" + line;\n    })\n    .join(\"\\n\");\n\n  const header = filename ? filename + \":\" + lineNo + \"\\n\" : \"line \" + lineNo + \"\\n\";\n\n  const err = new EtaRuntimeError(header + context + \"\\n\\n\" + originalError.message);\n\n  err.name = originalError.name; // the original name (e.g. ReferenceError) may be useful\n\n  throw err;\n}\n","import { EtaParseError } from \"./err.ts\";\n\n/* TYPES */\nimport type { Eta } from \"./core.ts\";\nimport type { EtaConfig, Options } from \"./config.ts\";\n\nexport type TemplateFunction = (this: Eta, data?: object, options?: Partial<Options>) => string;\n/* END TYPES */\n\n/* istanbul ignore next */\nconst AsyncFunction = async function () {}.constructor; // eslint-disable-line @typescript-eslint/no-empty-function\n\n/**\n * Takes a template string and returns a template function that can be called with (data, config)\n *\n * @param str - The template string\n * @param config - A custom configuration object (optional)\n */\n\nexport function compile(this: Eta, str: string, options?: Partial<Options>): TemplateFunction {\n  const config: EtaConfig = this.config;\n\n  /* ASYNC HANDLING */\n  // code gratefully taken from https://github.com/mde/ejs and adapted\n  const ctor = options && options.async ? (AsyncFunction as FunctionConstructor) : Function;\n  /* END ASYNC HANDLING */\n\n  try {\n    return new ctor(\n      config.varName,\n      \"options\",\n      this.compileToString.call(this, str, options)\n    ) as TemplateFunction; // eslint-disable-line no-new-func\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw new EtaParseError(\n        \"Bad template syntax\\n\\n\" +\n          e.message +\n          \"\\n\" +\n          Array(e.message.length + 1).join(\"=\") +\n          \"\\n\" +\n          this.compileToString.call(this, str, options) +\n          \"\\n\" // This will put an extra newline before the callstack for extra readability\n      );\n    } else {\n      throw e;\n    }\n  }\n}\n","/* TYPES */\n\nimport type { Options } from \"./config.ts\";\nimport type { AstObject } from \"./parse.ts\";\nimport type { Eta } from \"./core.ts\";\n\n/* END TYPES */\n\n/**\n * Compiles a template string to a function string. Most often users just use `compile()`, which calls `compileToString` and creates a new function using the result\n */\n\nexport function compileToString(this: Eta, str: string, options?: Partial<Options>): string {\n  const config = this.config;\n  const isAsync = options && options.async;\n\n  const compileBody = this.compileBody;\n\n  const buffer: Array<AstObject> = this.parse.call(this, str);\n\n  // note: when the include function passes through options, the only parameter that matters is the filepath parameter\n  let res = `${config.functionHeader}\nlet include = (template, data) => this.render(template, data, options);\nlet includeAsync = (template, data) => this.renderAsync(template, data, options);\n\nlet __eta = {res: \"\", e: this.config.escapeFunction, f: this.config.filterFunction${\n    config.debug\n      ? ', line: 1, templateStr: \"' +\n        str.replace(/\\\\|\"/g, \"\\\\$&\").replace(/\\r\\n|\\n|\\r/g, \"\\\\n\") +\n        '\"'\n      : \"\"\n  }};\n\nfunction layout(path, data) {\n  __eta.layout = path;\n  __eta.layoutData = data;\n}${config.debug ? \"try {\" : \"\"}${config.useWith ? \"with(\" + config.varName + \"||{}){\" : \"\"}\n\n${compileBody.call(this, buffer)}\nif (__eta.layout) {\n  __eta.res = ${isAsync ? \"await includeAsync\" : \"include\"} (__eta.layout, {...${\n    config.varName\n  }, body: __eta.res, ...__eta.layoutData});\n}\n${config.useWith ? \"}\" : \"\"}${\n    config.debug\n      ? \"} catch (e) { this.RuntimeErr(e, __eta.templateStr, __eta.line, options.filepath) }\"\n      : \"\"\n  }\nreturn __eta.res;\n`;\n\n  if (config.plugins) {\n    for (let i = 0; i < config.plugins.length; i++) {\n      const plugin = config.plugins[i];\n      if (plugin.processFnString) {\n        res = plugin.processFnString(res, config);\n      }\n    }\n  }\n\n  return res;\n}\n\n/**\n * Loops through the AST generated by `parse` and transform each item into JS calls\n *\n * **Example**\n *\n * ```js\n * let templateAST = ['Hi ', { val: 'it.name', t: 'i' }]\n * compileBody.call(Eta, templateAST)\n * // => \"__eta.res+='Hi '\\n__eta.res+=__eta.e(it.name)\\n\"\n * ```\n */\n\nexport function compileBody(this: Eta, buff: Array<AstObject>) {\n  const config = this.config;\n\n  let i = 0;\n  const buffLength = buff.length;\n  let returnStr = \"\";\n\n  for (i; i < buffLength; i++) {\n    const currentBlock = buff[i];\n    if (typeof currentBlock === \"string\") {\n      const str = currentBlock;\n\n      // we know string exists\n      returnStr += \"__eta.res+='\" + str + \"'\\n\";\n    } else {\n      const type = currentBlock.t; // \"r\", \"e\", or \"i\"\n      let content = currentBlock.val || \"\";\n\n      if (config.debug) returnStr += \"__eta.line=\" + currentBlock.lineNo + \"\\n\";\n\n      if (type === \"r\") {\n        // raw\n\n        if (config.autoFilter) {\n          content = \"__eta.f(\" + content + \")\";\n        }\n\n        returnStr += \"__eta.res+=\" + content + \"\\n\";\n      } else if (type === \"i\") {\n        // interpolate\n\n        if (config.autoFilter) {\n          content = \"__eta.f(\" + content + \")\";\n        }\n\n        if (config.autoEscape) {\n          content = \"__eta.e(\" + content + \")\";\n        }\n\n        returnStr += \"__eta.res+=\" + content + \"\\n\";\n      } else if (type === \"e\") {\n        // execute\n        returnStr += content + \"\\n\";\n      }\n    }\n  }\n\n  return returnStr;\n}\n","import type { EtaConfig } from \"./config.ts\";\n\n/**\n * Takes a string within a template and trims it, based on the preceding tag's whitespace control and `config.autoTrim`\n */\n\nexport function trimWS(\n  str: string,\n  config: EtaConfig,\n  wsLeft: string | false,\n  wsRight?: string | false\n): string {\n  let leftTrim;\n  let rightTrim;\n\n  if (Array.isArray(config.autoTrim)) {\n    // Slightly confusing,\n    // but _}} will trim the left side of the following string\n    leftTrim = config.autoTrim[1];\n    rightTrim = config.autoTrim[0];\n  } else {\n    leftTrim = rightTrim = config.autoTrim;\n  }\n\n  if (wsLeft || wsLeft === false) {\n    leftTrim = wsLeft;\n  }\n\n  if (wsRight || wsRight === false) {\n    rightTrim = wsRight;\n  }\n\n  if (!rightTrim && !leftTrim) {\n    return str;\n  }\n\n  if (leftTrim === \"slurp\" && rightTrim === \"slurp\") {\n    return str.trim();\n  }\n\n  if (leftTrim === \"_\" || leftTrim === \"slurp\") {\n    // full slurp\n    str = str.trimStart();\n  } else if (leftTrim === \"-\" || leftTrim === \"nl\") {\n    // nl trim\n    str = str.replace(/^(?:\\r\\n|\\n|\\r)/, \"\");\n  }\n\n  if (rightTrim === \"_\" || rightTrim === \"slurp\") {\n    // full slurp\n    str = str.trimEnd();\n  } else if (rightTrim === \"-\" || rightTrim === \"nl\") {\n    // nl trim\n    str = str.replace(/(?:\\r\\n|\\n|\\r)$/, \"\");\n  }\n\n  return str;\n}\n\n/**\n * A map of special HTML characters to their XML-escaped equivalents\n */\n\nconst escMap: { [key: string]: string } = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n};\n\nfunction replaceChar(s: string): string {\n  return escMap[s];\n}\n\n/**\n * XML-escapes an input value after converting it to a string\n *\n * @param str - Input value (usually a string)\n * @returns XML-escaped string\n */\n\nexport function XMLEscape(str: unknown): string {\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n  const newStr = String(str);\n  if (/[&<>\"']/.test(newStr)) {\n    return newStr.replace(/[&<>\"']/g, replaceChar);\n  } else {\n    return newStr;\n  }\n}\n","import { XMLEscape } from \"./utils.ts\";\n\n/* TYPES */\n\ntype trimConfig = \"nl\" | \"slurp\" | false;\n\nexport interface Options {\n  /** Compile to async function */\n  async?: boolean;\n\n  /** Absolute path to template file */\n  filepath?: string;\n}\n\nexport interface EtaConfig {\n  /** Whether or not to automatically XML-escape interpolations. Default true */\n  autoEscape: boolean;\n\n  /** Apply a filter function defined on the class to every interpolation or raw interpolation */\n  autoFilter: boolean;\n\n  /** Configure automatic whitespace trimming. Default `[false, 'nl']` */\n  autoTrim: trimConfig | [trimConfig, trimConfig];\n\n  /** Whether or not to cache templates if `name` or `filename` is passed */\n  cache: boolean;\n\n  /** Holds cache of resolved filepaths. Set to `false` to disable. */\n  cacheFilepaths: boolean;\n\n  /** Whether to pretty-format error messages (introduces runtime penalties) */\n  debug: boolean;\n\n  /** Function to XML-sanitize interpolations */\n  escapeFunction: (str: unknown) => string;\n\n  /** Function applied to all interpolations when autoFilter is true */\n  filterFunction: (val: unknown) => string;\n\n  /** Raw JS code inserted in the template function. Useful for declaring global variables for user templates */\n  functionHeader: string;\n\n  /** Parsing options */\n  parse: {\n    /** Which prefix to use for evaluation. Default `\"\"`, does not support `\"-\"` or `\"_\"` */\n    exec: string;\n\n    /** Which prefix to use for interpolation. Default `\"=\"`, does not support `\"-\"` or `\"_\"` */\n    interpolate: string;\n\n    /** Which prefix to use for raw interpolation. Default `\"~\"`, does not support `\"-\"` or `\"_\"` */\n    raw: string;\n  };\n\n  /** Array of plugins */\n  plugins: Array<{ processFnString?: Function; processAST?: Function; processTemplate?: Function }>;\n\n  /** Remove all safe-to-remove whitespace */\n  rmWhitespace: boolean;\n\n  /** Delimiters: by default `['<%', '%>']` */\n  tags: [string, string];\n\n  /** Make data available on the global object instead of varName */\n  useWith: boolean;\n\n  /** Name of the data object. Default `it` */\n  varName: string;\n\n  /** Directory that contains templates */\n  views?: string;\n\n  /** Control template file extension defaults. Default `.eta` */\n  defaultExtension?: string;\n}\n\n/* END TYPES */\n\n/** Eta's base (global) configuration */\nconst defaultConfig: EtaConfig = {\n  autoEscape: true,\n  autoFilter: false,\n  autoTrim: [false, \"nl\"],\n  cache: false,\n  cacheFilepaths: true,\n  debug: false,\n  escapeFunction: XMLEscape,\n  // default filter function (not used unless enables) just stringifies the input\n  filterFunction: (val) => String(val),\n  functionHeader: \"\",\n  parse: {\n    exec: \"\",\n    interpolate: \"=\",\n    raw: \"~\",\n  },\n  plugins: [],\n  rmWhitespace: false,\n  tags: [\"<%\", \"%>\"],\n  useWith: false,\n  varName: \"it\",\n  defaultExtension: \".eta\",\n};\n\nexport { defaultConfig };\n","import { ParseErr } from \"./err.ts\";\nimport { trimWS } from \"./utils.ts\";\n\n/* TYPES */\n\nimport type { Eta } from \"./core.ts\";\n\nexport type TagType = \"r\" | \"e\" | \"i\" | \"\";\n\nexport interface TemplateObject {\n  t: TagType;\n  val: string;\n  lineNo?: number;\n}\n\nexport type AstObject = string | TemplateObject;\n\n/* END TYPES */\n\nconst templateLitReg = /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\\${)[^\\\\`])*`/g;\n\nconst singleQuoteReg = /'(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r'\\\\])*?'/g;\n\nconst doubleQuoteReg = /\"(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r\"\\\\])*?\"/g;\n\n/** Escape special regular expression characters inside a string */\n\nfunction escapeRegExp(string: string) {\n  // From MDN\n  return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\nfunction getLineNo(str: string, index: number) {\n  return str.slice(0, index).split(\"\\n\").length;\n}\n\nexport function parse(this: Eta, str: string): Array<AstObject> {\n  const config = this.config;\n\n  let buffer: Array<AstObject> = [];\n  let trimLeftOfNextStr: string | false = false;\n  let lastIndex = 0;\n  const parseOptions = config.parse;\n\n  if (config.plugins) {\n    for (let i = 0; i < config.plugins.length; i++) {\n      const plugin = config.plugins[i];\n      if (plugin.processTemplate) {\n        str = plugin.processTemplate(str, config);\n      }\n    }\n  }\n\n  /* Adding for EJS compatibility */\n  if (config.rmWhitespace) {\n    // Code taken directly from EJS\n    // Have to use two separate replaces here as `^` and `$` operators don't\n    // work well with `\\r` and empty lines don't work well with the `m` flag.\n    // Essentially, this replaces the whitespace at the beginning and end of\n    // each line and removes multiple newlines.\n    str = str.replace(/[\\r\\n]+/g, \"\\n\").replace(/^\\s+|\\s+$/gm, \"\");\n  }\n  /* End rmWhitespace option */\n\n  templateLitReg.lastIndex = 0;\n  singleQuoteReg.lastIndex = 0;\n  doubleQuoteReg.lastIndex = 0;\n\n  function pushString(strng: string, shouldTrimRightOfString?: string | false) {\n    if (strng) {\n      // if string is truthy it must be of type 'string'\n\n      strng = trimWS(\n        strng,\n        config,\n        trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\n        shouldTrimRightOfString\n      );\n\n      if (strng) {\n        // replace \\ with \\\\, ' with \\'\n        // we're going to convert all CRLF to LF so it doesn't take more than one replace\n\n        strng = strng.replace(/\\\\|'/g, \"\\\\$&\").replace(/\\r\\n|\\n|\\r/g, \"\\\\n\");\n\n        buffer.push(strng);\n      }\n    }\n  }\n\n  const prefixes = [parseOptions.exec, parseOptions.interpolate, parseOptions.raw].reduce(function (\n    accumulator,\n    prefix\n  ) {\n    if (accumulator && prefix) {\n      return accumulator + \"|\" + escapeRegExp(prefix);\n    } else if (prefix) {\n      // accumulator is falsy\n      return escapeRegExp(prefix);\n    } else {\n      // prefix and accumulator are both falsy\n      return accumulator;\n    }\n  },\n  \"\");\n\n  const parseOpenReg = new RegExp(\n    escapeRegExp(config.tags[0]) + \"(-|_)?\\\\s*(\" + prefixes + \")?\\\\s*\",\n    \"g\"\n  );\n\n  const parseCloseReg = new RegExp(\n    \"'|\\\"|`|\\\\/\\\\*|(\\\\s*(-|_)?\" + escapeRegExp(config.tags[1]) + \")\",\n    \"g\"\n  );\n\n  let m;\n\n  while ((m = parseOpenReg.exec(str))) {\n    const precedingString = str.slice(lastIndex, m.index);\n\n    lastIndex = m[0].length + m.index;\n\n    const wsLeft = m[1];\n    const prefix = m[2] || \"\"; // by default either ~, =, or empty\n\n    pushString(precedingString, wsLeft);\n\n    parseCloseReg.lastIndex = lastIndex;\n    let closeTag;\n    let currentObj: AstObject | false = false;\n\n    while ((closeTag = parseCloseReg.exec(str))) {\n      if (closeTag[1]) {\n        const content = str.slice(lastIndex, closeTag.index);\n\n        parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex;\n\n        trimLeftOfNextStr = closeTag[2];\n\n        const currentType: TagType =\n          prefix === parseOptions.exec\n            ? \"e\"\n            : prefix === parseOptions.raw\n            ? \"r\"\n            : prefix === parseOptions.interpolate\n            ? \"i\"\n            : \"\";\n\n        currentObj = { t: currentType, val: content };\n        break;\n      } else {\n        const char = closeTag[0];\n        if (char === \"/*\") {\n          const commentCloseInd = str.indexOf(\"*/\", parseCloseReg.lastIndex);\n\n          if (commentCloseInd === -1) {\n            ParseErr(\"unclosed comment\", str, closeTag.index);\n          }\n          parseCloseReg.lastIndex = commentCloseInd;\n        } else if (char === \"'\") {\n          singleQuoteReg.lastIndex = closeTag.index;\n\n          const singleQuoteMatch = singleQuoteReg.exec(str);\n          if (singleQuoteMatch) {\n            parseCloseReg.lastIndex = singleQuoteReg.lastIndex;\n          } else {\n            ParseErr(\"unclosed string\", str, closeTag.index);\n          }\n        } else if (char === '\"') {\n          doubleQuoteReg.lastIndex = closeTag.index;\n          const doubleQuoteMatch = doubleQuoteReg.exec(str);\n\n          if (doubleQuoteMatch) {\n            parseCloseReg.lastIndex = doubleQuoteReg.lastIndex;\n          } else {\n            ParseErr(\"unclosed string\", str, closeTag.index);\n          }\n        } else if (char === \"`\") {\n          templateLitReg.lastIndex = closeTag.index;\n          const templateLitMatch = templateLitReg.exec(str);\n          if (templateLitMatch) {\n            parseCloseReg.lastIndex = templateLitReg.lastIndex;\n          } else {\n            ParseErr(\"unclosed string\", str, closeTag.index);\n          }\n        }\n      }\n    }\n    if (currentObj) {\n      if (config.debug) {\n        currentObj.lineNo = getLineNo(str, m.index);\n      }\n      buffer.push(currentObj);\n    } else {\n      ParseErr(\"unclosed tag\", str, m.index);\n    }\n  }\n\n  pushString(str.slice(lastIndex, str.length), false);\n\n  if (config.plugins) {\n    for (let i = 0; i < config.plugins.length; i++) {\n      const plugin = config.plugins[i];\n      if (plugin.processAST) {\n        buffer = plugin.processAST(buffer, config);\n      }\n    }\n  }\n\n  return buffer;\n}\n","import { EtaNameResolutionError } from \"./err.ts\";\n\n/* TYPES */\nimport type { Options } from \"./config.ts\";\nimport type { TemplateFunction } from \"./compile.ts\";\nimport type { Eta } from \"./core.ts\";\n/* END TYPES */\n\nfunction handleCache(this: Eta, template: string, options: Partial<Options>): TemplateFunction {\n  const templateStore = options && options.async ? this.templatesAsync : this.templatesSync;\n\n  if (this.resolvePath && this.readFile && !template.startsWith(\"@\")) {\n    const templatePath = options.filepath as string;\n\n    const cachedTemplate = templateStore.get(templatePath);\n\n    if (this.config.cache && cachedTemplate) {\n      return cachedTemplate;\n    } else {\n      const templateString = this.readFile(templatePath);\n\n      const templateFn = this.compile(templateString, options);\n\n      if (this.config.cache) templateStore.define(templatePath, templateFn);\n\n      return templateFn;\n    }\n  } else {\n    const cachedTemplate = templateStore.get(template);\n\n    if (cachedTemplate) {\n      return cachedTemplate;\n    } else {\n      throw new EtaNameResolutionError(\"Failed to get template '\" + template + \"'\");\n    }\n  }\n}\n\nexport function render<T extends object>(\n  this: Eta,\n  template: string | TemplateFunction, // template name or template function\n  data: T,\n  meta?: { filepath: string }\n): string {\n  let templateFn: TemplateFunction;\n  const options = { ...meta, async: false };\n\n  if (typeof template === \"string\") {\n    if (this.resolvePath && this.readFile && !template.startsWith(\"@\")) {\n      options.filepath = this.resolvePath(template, options);\n    }\n\n    templateFn = handleCache.call(this, template, options);\n  } else {\n    templateFn = template;\n  }\n\n  const res = templateFn.call(this, data, options);\n\n  return res;\n}\n\nexport function renderAsync<T extends object>(\n  this: Eta,\n  template: string | TemplateFunction, // template name or template function\n  data: T,\n  meta?: { filepath: string }\n): Promise<string> {\n  let templateFn: TemplateFunction;\n  const options = { ...meta, async: true };\n\n  if (typeof template === \"string\") {\n    if (this.resolvePath && this.readFile && !template.startsWith(\"@\")) {\n      options.filepath = this.resolvePath(template, options);\n    }\n\n    templateFn = handleCache.call(this, template, options);\n  } else {\n    templateFn = template;\n  }\n\n  const res = templateFn.call(this, data, options);\n\n  // Return a promise\n  return Promise.resolve(res);\n}\n\nexport function renderString<T extends object>(this: Eta, template: string, data: T): string {\n  const templateFn = this.compile(template, { async: false });\n\n  return render.call(this, templateFn, data);\n}\n\nexport function renderStringAsync<T extends object>(\n  this: Eta,\n  template: string,\n  data: T\n): Promise<string> {\n  const templateFn = this.compile(template, { async: true });\n\n  return renderAsync.call(this, templateFn, data);\n}\n","import { Cacher } from \"./storage.ts\";\nimport { compile } from \"./compile.ts\";\nimport { compileToString, compileBody } from \"./compile-string.ts\";\nimport { defaultConfig } from \"./config.ts\";\nimport { parse } from \"./parse.ts\";\nimport { render, renderAsync, renderString, renderStringAsync } from \"./render.ts\";\nimport { RuntimeErr, EtaError } from \"./err.ts\";\nimport { TemplateFunction } from \"./compile.ts\";\n\n/* TYPES */\nimport type { EtaConfig, Options } from \"./config.ts\";\n/* END TYPES */\n\nexport class Eta {\n  constructor(customConfig?: Partial<EtaConfig>) {\n    if (customConfig) {\n      this.config = { ...defaultConfig, ...customConfig };\n    } else {\n      this.config = { ...defaultConfig };\n    }\n  }\n\n  config: EtaConfig;\n\n  RuntimeErr = RuntimeErr;\n\n  compile = compile;\n  compileToString = compileToString;\n  compileBody = compileBody;\n  parse = parse;\n  render = render;\n  renderAsync = renderAsync;\n  renderString = renderString;\n  renderStringAsync = renderStringAsync;\n\n  filepathCache: Record<string, string> = {};\n  templatesSync = new Cacher<TemplateFunction>({});\n  templatesAsync = new Cacher<TemplateFunction>({});\n\n  // resolvePath takes a relative path from the \"views\" directory\n  resolvePath: null | ((this: Eta, template: string, options?: Partial<Options>) => string) = null;\n  readFile: null | ((this: Eta, path: string) => string) = null;\n\n  // METHODS\n\n  configure(customConfig: Partial<EtaConfig>) {\n    this.config = { ...this.config, ...customConfig };\n  }\n\n  withConfig(customConfig: Partial<EtaConfig>) {\n    return { ...this, config: { ...this.config, ...customConfig } };\n  }\n\n  loadTemplate(\n    name: string,\n    template: string | TemplateFunction, // template string or template function\n    options?: { async: boolean }\n  ): void {\n    if (typeof template === \"string\") {\n      const templates = options && options.async ? this.templatesAsync : this.templatesSync;\n\n      templates.define(name, this.compile(template, options));\n    } else {\n      let templates = this.templatesSync;\n\n      if (template.constructor.name === \"AsyncFunction\" || (options && options.async)) {\n        templates = this.templatesAsync;\n      }\n\n      templates.define(name, template);\n    }\n  }\n}\n\n// for instance checking against thrown errors\nexport { EtaError };\n","import { EtaFileResolutionError } from \"./err.ts\";\n\nimport * as path from \"node:path\";\n\nimport * as fs from \"node:fs\";\n\n/* TYPES */\nimport type { Eta as EtaCore } from \"./core.ts\";\nimport type { Options } from \"./config.ts\";\n/* END TYPES */\n\nexport function readFile(this: EtaCore, path: string): string {\n  let res = \"\";\n\n  try {\n    res = fs.readFileSync(path, \"utf8\");\n    // eslint-disable-line @typescript-eslint/no-explicit-any\n  } catch (err: any) {\n    if (err?.code === \"ENOENT\") {\n      throw new EtaFileResolutionError(`Could not find template: ${path}`);\n    } else {\n      throw err;\n    }\n  }\n\n  return res;\n}\n\nexport function resolvePath(\n  this: EtaCore,\n  templatePath: string,\n  options?: Partial<Options>\n): string {\n  let resolvedFilePath = \"\";\n\n  const views = this.config.views;\n\n  if (!views) {\n    throw new EtaFileResolutionError(\"Views directory is not defined\");\n  }\n\n  const baseFilePath = options && options.filepath;\n  const defaultExtension =\n    this.config.defaultExtension === undefined ? \".eta\" : this.config.defaultExtension;\n\n  // how we index cached template paths\n  const cacheIndex = JSON.stringify({\n    filename: baseFilePath, // filename of the template which called includeFile()\n    path: templatePath,\n    views: this.config.views,\n  });\n\n  templatePath += path.extname(templatePath) ? \"\" : defaultExtension;\n\n  // if the file was included from another template\n  if (baseFilePath) {\n    // check the cache\n\n    if (this.config.cacheFilepaths && this.filepathCache[cacheIndex]) {\n      return this.filepathCache[cacheIndex];\n    }\n\n    const absolutePathTest = absolutePathRegExp.exec(templatePath);\n\n    if (absolutePathTest && absolutePathTest.length) {\n      const formattedPath = templatePath.replace(/^\\/*|^\\\\*/, \"\");\n      resolvedFilePath = path.join(views, formattedPath);\n    } else {\n      resolvedFilePath = path.join(path.dirname(baseFilePath), templatePath);\n    }\n  } else {\n    resolvedFilePath = path.join(views, templatePath);\n  }\n\n  if (dirIsChild(views, resolvedFilePath)) {\n    // add resolved path to the cache\n    if (baseFilePath && this.config.cacheFilepaths) {\n      this.filepathCache[cacheIndex] = resolvedFilePath;\n    }\n\n    return resolvedFilePath;\n  } else {\n    throw new EtaFileResolutionError(`Template '${templatePath}' is not in the views directory`);\n  }\n}\n\nfunction dirIsChild(parent: string, dir: string) {\n  const relative = path.relative(parent, dir);\n  return relative && !relative.startsWith(\"..\") && !path.isAbsolute(relative);\n}\n\nconst absolutePathRegExp = /^\\\\|^\\//;\n","import { Eta as EtaCore } from \"./core.ts\";\nimport { readFile, resolvePath } from \"./file-handling.ts\";\nexport {\n  EtaError,\n  EtaParseError,\n  EtaRuntimeError,\n  EtaFileResolutionError,\n  EtaNameResolutionError,\n} from \"./err.ts\";\n\nexport class Eta extends EtaCore {\n  readFile = readFile;\n\n  resolvePath = resolvePath;\n}\n"],"names":["Cacher","constructor","cache","define","key","val","get","remove","reset","load","cacheObj","EtaError","Error","message","name","EtaParseError","EtaRuntimeError","EtaFileResolutionError","EtaNameResolutionError","ParseErr","str","indx","whitespace","slice","split","lineNo","length","colNo","Array","join","RuntimeErr","originalError","path","lines","start","Math","max","end","min","filename","context","map","line","i","curr","header","err","AsyncFunction","compile","options","config","ctor","async","Function","varName","compileToString","call","e","SyntaxError","isAsync","compileBody","buffer","parse","res","functionHeader","debug","replace","useWith","plugins","plugin","processFnString","buff","buffLength","returnStr","currentBlock","type","t","content","autoFilter","autoEscape","trimWS","wsLeft","wsRight","leftTrim","rightTrim","isArray","autoTrim","trim","trimStart","trimEnd","escMap","replaceChar","s","XMLEscape","newStr","String","test","defaultConfig","cacheFilepaths","escapeFunction","filterFunction","exec","interpolate","raw","rmWhitespace","tags","defaultExtension","templateLitReg","singleQuoteReg","doubleQuoteReg","escapeRegExp","string","getLineNo","index","trimLeftOfNextStr","lastIndex","parseOptions","processTemplate","pushString","strng","shouldTrimRightOfString","push","prefixes","reduce","accumulator","prefix","parseOpenReg","RegExp","parseCloseReg","m","precedingString","closeTag","currentObj","currentType","char","commentCloseInd","indexOf","singleQuoteMatch","doubleQuoteMatch","templateLitMatch","processAST","handleCache","template","templateStore","templatesAsync","templatesSync","resolvePath","readFile","startsWith","templatePath","filepath","cachedTemplate","templateString","templateFn","render","data","meta","renderAsync","Promise","resolve","renderString","renderStringAsync","Eta","customConfig","filepathCache","configure","withConfig","loadTemplate","templates","fs","readFileSync","code","resolvedFilePath","views","baseFilePath","undefined","cacheIndex","JSON","stringify","extname","absolutePathTest","absolutePathRegExp","formattedPath","dirname","dirIsChild","parent","dir","relative","isAbsolute","EtaCore","args"],"mappings":"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"}